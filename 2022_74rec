public class 2022_74rec {

	public static void main(String[] args) {
	     //driver// 
 		     char mat[][]=   { 
  		    	 { 'a' ,'c' ,'b' ,'c' ,'@' ,'a'},
 	    		 {'b' ,'x' ,'z' ,'c' ,'p' ,'a'},
 		    	 { '?', 'c', 'd', '*', 'c', 'd'},
 	    		 {'b', 'c', 'a', '8', 'b', 'b'},
 	    	     {'c', '2', 'x', '+', 'b', 'c'},
 	     };

		    String pattern="abc";
		    System.out.println( "Max length from 0,0: " + lengthPath (mat,pattern,0,0));
		    System.out.println( "Max length from i,j: "+maxPath(mat, pattern,0,0));
	}
	public static int maxPath (char[][] mat, String pattern,int i ,int j) {
		
		if (j==mat[0].length-1) return maxPath(mat, pattern, i+1, 0);
		if (i==mat.length-1) return 0;
		
		return Math.max( maxPath(mat, pattern, i, j+1),lengthPath(mat, pattern, i, j));
	}
	
	private static int lengthPath(char[][] mat, String pattern,int i,int j) {
		 if (i<0 || i>mat.length-1 || j<0 || j>mat[0].length-1) return 0;
		 
		 if (pattern.indexOf(mat[i][j])==-1 ) return 0;
		 char temp = mat[i][j];
		 mat[i][j]= ' ';
		 int a=lengthPath(mat, pattern, i+1, j)+1;
		 int b=lengthPath(mat, pattern, i-1, j)+1;
		 int c=lengthPath(mat, pattern, i, j+1)+1;
		 int d=lengthPath(mat, pattern, i, j-1)+1;
		 mat[i][j]=temp;
		return Math.max(Math.max(a, b), Math.max(c, d));
	}
	
	
}
