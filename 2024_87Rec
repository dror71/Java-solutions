package tests2;

public class SummerB2024 {

	public static void main(String[] args) {
		  
		
		int mat[][]={
			         {1,0,0,1,0},
			         {0,0,0,0,0},  
			         {0,0,1,0,0},
			         {0,0,0,0,1},
			     };
			  System.out.println(checkPath(mat ) );
			    }


				public static boolean checkPath(int[][]mat ) {
			    	int Totalcount = countOnes(mat,0,0,0);
			      if    (checkPath( mat,0,0,"",Totalcount,1 )) {
			    	  System.out.println( countPathesThroughOnes(mat, 0, 0, "", Totalcount, 1));
			    	  return true;
			       }
			       else
			    	   return false; 
 
			    }

			    private static int countOnes(int[][] mat, int i, int j,int count) {
					if (i>=mat.length) return count;
			    	if (j>=mat[0].length) return countOnes(mat, i+1, 0,count);
			    	if (mat[i][j]==1) count++;
			    	countOnes(mat, i, j+1, count);
					
			    	return countOnes(mat, i, j+1,count);
				}

				private static boolean checkPath(int[][]mat, int i, int j,String s,int Totalcount,int count ) {
			        if ( i>=mat.length  ||  j>=mat[0].length) return false;
			        if (i==mat.length-1 && j==mat[0].length-1)
			        {
			        	if (count ==Totalcount) {
			        		return true;
			        	}
			        	return false;
			        }
			         if (mat[i][j]==1) count++;
 			            boolean r1=checkPath( mat,  i+1,  j, s,Totalcount,count);
			             boolean r2=checkPath( mat,  i,  j+1,s,Totalcount,count );
			            
			            return r1||r2;
			        
			    }
				
				
				private static int countPathesThroughOnes(int[][]mat, int i, int j,String s,int Totalcount,int count ) {
			        if ( i>=mat.length  ||  j>=mat[0].length) return 0;
			        if (i==mat.length-1 && j==mat[0].length-1)
			        {
			        	if (count ==Totalcount) {
			        		System.out.println(s);
			        		return 1;
			        	}
			        	return 0;
			        }
			         if (mat[i][j]==1) count++;
			         	s+="("+i+","+j+") -> ";
 			            int r1=countPathesThroughOnes( mat,  i+1,  j, s,Totalcount,count);
			             int r2=countPathesThroughOnes( mat,  i,  j+1,s,Totalcount,count );
			            
			            return r1+r2;
			        
			    }

	}

 
